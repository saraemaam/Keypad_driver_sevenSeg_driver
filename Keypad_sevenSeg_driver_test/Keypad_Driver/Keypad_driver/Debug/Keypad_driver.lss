
Keypad_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000009c0  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000052d  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 df 03 	jmp	0x7be	; 0x7be <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 Description : Test the keypad driver with 7-segment on Proteus

 ********************************************************************/

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0





}
  78:	cf 91       	pop	r28
  7a:	df 91       	pop	r29
  7c:	08 95       	ret

0000007e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
  7e:	df 93       	push	r29
  80:	cf 93       	push	r28
  82:	00 d0       	rcall	.+0      	; 0x84 <GPIO_setupPinDirection+0x6>
  84:	00 d0       	rcall	.+0      	; 0x86 <GPIO_setupPinDirection+0x8>
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	6a 83       	std	Y+2, r22	; 0x02
  90:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
  92:	8a 81       	ldd	r24, Y+2	; 0x02
  94:	88 30       	cpi	r24, 0x08	; 8
  96:	08 f0       	brcs	.+2      	; 0x9a <GPIO_setupPinDirection+0x1c>
  98:	d5 c0       	rjmp	.+426    	; 0x244 <GPIO_setupPinDirection+0x1c6>
  9a:	89 81       	ldd	r24, Y+1	; 0x01
  9c:	84 30       	cpi	r24, 0x04	; 4
  9e:	08 f0       	brcs	.+2      	; 0xa2 <GPIO_setupPinDirection+0x24>
  a0:	d1 c0       	rjmp	.+418    	; 0x244 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	28 2f       	mov	r18, r24
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	3d 83       	std	Y+5, r19	; 0x05
  aa:	2c 83       	std	Y+4, r18	; 0x04
  ac:	8c 81       	ldd	r24, Y+4	; 0x04
  ae:	9d 81       	ldd	r25, Y+5	; 0x05
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	91 05       	cpc	r25, r1
  b4:	09 f4       	brne	.+2      	; 0xb8 <GPIO_setupPinDirection+0x3a>
  b6:	43 c0       	rjmp	.+134    	; 0x13e <GPIO_setupPinDirection+0xc0>
  b8:	2c 81       	ldd	r18, Y+4	; 0x04
  ba:	3d 81       	ldd	r19, Y+5	; 0x05
  bc:	22 30       	cpi	r18, 0x02	; 2
  be:	31 05       	cpc	r19, r1
  c0:	2c f4       	brge	.+10     	; 0xcc <GPIO_setupPinDirection+0x4e>
  c2:	8c 81       	ldd	r24, Y+4	; 0x04
  c4:	9d 81       	ldd	r25, Y+5	; 0x05
  c6:	00 97       	sbiw	r24, 0x00	; 0
  c8:	71 f0       	breq	.+28     	; 0xe6 <GPIO_setupPinDirection+0x68>
  ca:	bc c0       	rjmp	.+376    	; 0x244 <GPIO_setupPinDirection+0x1c6>
  cc:	2c 81       	ldd	r18, Y+4	; 0x04
  ce:	3d 81       	ldd	r19, Y+5	; 0x05
  d0:	22 30       	cpi	r18, 0x02	; 2
  d2:	31 05       	cpc	r19, r1
  d4:	09 f4       	brne	.+2      	; 0xd8 <GPIO_setupPinDirection+0x5a>
  d6:	5f c0       	rjmp	.+190    	; 0x196 <GPIO_setupPinDirection+0x118>
  d8:	8c 81       	ldd	r24, Y+4	; 0x04
  da:	9d 81       	ldd	r25, Y+5	; 0x05
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	09 f4       	brne	.+2      	; 0xe4 <GPIO_setupPinDirection+0x66>
  e2:	85 c0       	rjmp	.+266    	; 0x1ee <GPIO_setupPinDirection+0x170>
  e4:	af c0       	rjmp	.+350    	; 0x244 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
  e6:	8b 81       	ldd	r24, Y+3	; 0x03
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	a1 f4       	brne	.+40     	; 0x114 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA_REG,pin_num);
  ec:	aa e3       	ldi	r26, 0x3A	; 58
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	ea e3       	ldi	r30, 0x3A	; 58
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	48 2f       	mov	r20, r24
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	28 2f       	mov	r18, r24
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 2e       	mov	r0, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_setupPinDirection+0x8c>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_setupPinDirection+0x88>
 10e:	84 2b       	or	r24, r20
 110:	8c 93       	st	X, r24
 112:	98 c0       	rjmp	.+304    	; 0x244 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG,pin_num);
 114:	aa e3       	ldi	r26, 0x3A	; 58
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	ea e3       	ldi	r30, 0x3A	; 58
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	48 2f       	mov	r20, r24
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 2e       	mov	r0, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <GPIO_setupPinDirection+0xb4>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <GPIO_setupPinDirection+0xb0>
 136:	80 95       	com	r24
 138:	84 23       	and	r24, r20
 13a:	8c 93       	st	X, r24
 13c:	83 c0       	rjmp	.+262    	; 0x244 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	a1 f4       	brne	.+40     	; 0x16c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB_REG,pin_num);
 144:	a7 e3       	ldi	r26, 0x37	; 55
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	e7 e3       	ldi	r30, 0x37	; 55
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	48 2f       	mov	r20, r24
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	28 2f       	mov	r18, r24
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <GPIO_setupPinDirection+0xe4>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <GPIO_setupPinDirection+0xe0>
 166:	84 2b       	or	r24, r20
 168:	8c 93       	st	X, r24
 16a:	6c c0       	rjmp	.+216    	; 0x244 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG,pin_num);
 16c:	a7 e3       	ldi	r26, 0x37	; 55
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	e7 e3       	ldi	r30, 0x37	; 55
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	48 2f       	mov	r20, r24
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	28 2f       	mov	r18, r24
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 2e       	mov	r0, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <GPIO_setupPinDirection+0x10c>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <GPIO_setupPinDirection+0x108>
 18e:	80 95       	com	r24
 190:	84 23       	and	r24, r20
 192:	8c 93       	st	X, r24
 194:	57 c0       	rjmp	.+174    	; 0x244 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	a1 f4       	brne	.+40     	; 0x1c4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC_REG,pin_num);
 19c:	a4 e3       	ldi	r26, 0x34	; 52
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	e4 e3       	ldi	r30, 0x34	; 52
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	48 2f       	mov	r20, r24
 1a8:	8a 81       	ldd	r24, Y+2	; 0x02
 1aa:	28 2f       	mov	r18, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 2e       	mov	r0, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <GPIO_setupPinDirection+0x13c>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <GPIO_setupPinDirection+0x138>
 1be:	84 2b       	or	r24, r20
 1c0:	8c 93       	st	X, r24
 1c2:	40 c0       	rjmp	.+128    	; 0x244 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG,pin_num);
 1c4:	a4 e3       	ldi	r26, 0x34	; 52
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	e4 e3       	ldi	r30, 0x34	; 52
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	48 2f       	mov	r20, r24
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	28 2f       	mov	r18, r24
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <GPIO_setupPinDirection+0x164>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <GPIO_setupPinDirection+0x160>
 1e6:	80 95       	com	r24
 1e8:	84 23       	and	r24, r20
 1ea:	8c 93       	st	X, r24
 1ec:	2b c0       	rjmp	.+86     	; 0x244 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	a1 f4       	brne	.+40     	; 0x21c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD_REG,pin_num);
 1f4:	a1 e3       	ldi	r26, 0x31	; 49
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e1 e3       	ldi	r30, 0x31	; 49
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <GPIO_setupPinDirection+0x194>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <GPIO_setupPinDirection+0x190>
 216:	84 2b       	or	r24, r20
 218:	8c 93       	st	X, r24
 21a:	14 c0       	rjmp	.+40     	; 0x244 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG,pin_num);
 21c:	a1 e3       	ldi	r26, 0x31	; 49
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e1 e3       	ldi	r30, 0x31	; 49
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 2e       	mov	r0, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <GPIO_setupPinDirection+0x1bc>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	0a 94       	dec	r0
 23c:	e2 f7       	brpl	.-8      	; 0x236 <GPIO_setupPinDirection+0x1b8>
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	cf 91       	pop	r28
 250:	df 91       	pop	r29
 252:	08 95       	ret

00000254 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 254:	df 93       	push	r29
 256:	cf 93       	push	r28
 258:	00 d0       	rcall	.+0      	; 0x25a <GPIO_writePin+0x6>
 25a:	00 d0       	rcall	.+0      	; 0x25c <GPIO_writePin+0x8>
 25c:	0f 92       	push	r0
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	89 83       	std	Y+1, r24	; 0x01
 264:	6a 83       	std	Y+2, r22	; 0x02
 266:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 268:	8a 81       	ldd	r24, Y+2	; 0x02
 26a:	88 30       	cpi	r24, 0x08	; 8
 26c:	08 f0       	brcs	.+2      	; 0x270 <GPIO_writePin+0x1c>
 26e:	d5 c0       	rjmp	.+426    	; 0x41a <GPIO_writePin+0x1c6>
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	84 30       	cpi	r24, 0x04	; 4
 274:	08 f0       	brcs	.+2      	; 0x278 <GPIO_writePin+0x24>
 276:	d1 c0       	rjmp	.+418    	; 0x41a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 278:	89 81       	ldd	r24, Y+1	; 0x01
 27a:	28 2f       	mov	r18, r24
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	3d 83       	std	Y+5, r19	; 0x05
 280:	2c 83       	std	Y+4, r18	; 0x04
 282:	8c 81       	ldd	r24, Y+4	; 0x04
 284:	9d 81       	ldd	r25, Y+5	; 0x05
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	91 05       	cpc	r25, r1
 28a:	09 f4       	brne	.+2      	; 0x28e <GPIO_writePin+0x3a>
 28c:	43 c0       	rjmp	.+134    	; 0x314 <GPIO_writePin+0xc0>
 28e:	2c 81       	ldd	r18, Y+4	; 0x04
 290:	3d 81       	ldd	r19, Y+5	; 0x05
 292:	22 30       	cpi	r18, 0x02	; 2
 294:	31 05       	cpc	r19, r1
 296:	2c f4       	brge	.+10     	; 0x2a2 <GPIO_writePin+0x4e>
 298:	8c 81       	ldd	r24, Y+4	; 0x04
 29a:	9d 81       	ldd	r25, Y+5	; 0x05
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	71 f0       	breq	.+28     	; 0x2bc <GPIO_writePin+0x68>
 2a0:	bc c0       	rjmp	.+376    	; 0x41a <GPIO_writePin+0x1c6>
 2a2:	2c 81       	ldd	r18, Y+4	; 0x04
 2a4:	3d 81       	ldd	r19, Y+5	; 0x05
 2a6:	22 30       	cpi	r18, 0x02	; 2
 2a8:	31 05       	cpc	r19, r1
 2aa:	09 f4       	brne	.+2      	; 0x2ae <GPIO_writePin+0x5a>
 2ac:	5f c0       	rjmp	.+190    	; 0x36c <GPIO_writePin+0x118>
 2ae:	8c 81       	ldd	r24, Y+4	; 0x04
 2b0:	9d 81       	ldd	r25, Y+5	; 0x05
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	91 05       	cpc	r25, r1
 2b6:	09 f4       	brne	.+2      	; 0x2ba <GPIO_writePin+0x66>
 2b8:	85 c0       	rjmp	.+266    	; 0x3c4 <GPIO_writePin+0x170>
 2ba:	af c0       	rjmp	.+350    	; 0x41a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	a1 f4       	brne	.+40     	; 0x2ea <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA_REG,pin_num);
 2c2:	ab e3       	ldi	r26, 0x3B	; 59
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	eb e3       	ldi	r30, 0x3B	; 59
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	48 2f       	mov	r20, r24
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	28 2f       	mov	r18, r24
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 2e       	mov	r0, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <GPIO_writePin+0x8c>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <GPIO_writePin+0x88>
 2e4:	84 2b       	or	r24, r20
 2e6:	8c 93       	st	X, r24
 2e8:	98 c0       	rjmp	.+304    	; 0x41a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA_REG,pin_num);
 2ea:	ab e3       	ldi	r26, 0x3B	; 59
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	eb e3       	ldi	r30, 0x3B	; 59
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	48 2f       	mov	r20, r24
 2f6:	8a 81       	ldd	r24, Y+2	; 0x02
 2f8:	28 2f       	mov	r18, r24
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 2e       	mov	r0, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <GPIO_writePin+0xb4>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <GPIO_writePin+0xb0>
 30c:	80 95       	com	r24
 30e:	84 23       	and	r24, r20
 310:	8c 93       	st	X, r24
 312:	83 c0       	rjmp	.+262    	; 0x41a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	81 30       	cpi	r24, 0x01	; 1
 318:	a1 f4       	brne	.+40     	; 0x342 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB_REG,pin_num);
 31a:	a8 e3       	ldi	r26, 0x38	; 56
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	e8 e3       	ldi	r30, 0x38	; 56
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	48 2f       	mov	r20, r24
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	28 2f       	mov	r18, r24
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 2e       	mov	r0, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <GPIO_writePin+0xe4>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <GPIO_writePin+0xe0>
 33c:	84 2b       	or	r24, r20
 33e:	8c 93       	st	X, r24
 340:	6c c0       	rjmp	.+216    	; 0x41a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB_REG,pin_num);
 342:	a8 e3       	ldi	r26, 0x38	; 56
 344:	b0 e0       	ldi	r27, 0x00	; 0
 346:	e8 e3       	ldi	r30, 0x38	; 56
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	48 2f       	mov	r20, r24
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 2e       	mov	r0, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <GPIO_writePin+0x10c>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <GPIO_writePin+0x108>
 364:	80 95       	com	r24
 366:	84 23       	and	r24, r20
 368:	8c 93       	st	X, r24
 36a:	57 c0       	rjmp	.+174    	; 0x41a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	a1 f4       	brne	.+40     	; 0x39a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC_REG,pin_num);
 372:	a5 e3       	ldi	r26, 0x35	; 53
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	e5 e3       	ldi	r30, 0x35	; 53
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	48 2f       	mov	r20, r24
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 2e       	mov	r0, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <GPIO_writePin+0x13c>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <GPIO_writePin+0x138>
 394:	84 2b       	or	r24, r20
 396:	8c 93       	st	X, r24
 398:	40 c0       	rjmp	.+128    	; 0x41a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC_REG,pin_num);
 39a:	a5 e3       	ldi	r26, 0x35	; 53
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	e5 e3       	ldi	r30, 0x35	; 53
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	48 2f       	mov	r20, r24
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 2e       	mov	r0, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <GPIO_writePin+0x164>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <GPIO_writePin+0x160>
 3bc:	80 95       	com	r24
 3be:	84 23       	and	r24, r20
 3c0:	8c 93       	st	X, r24
 3c2:	2b c0       	rjmp	.+86     	; 0x41a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	a1 f4       	brne	.+40     	; 0x3f2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD_REG,pin_num);
 3ca:	a2 e3       	ldi	r26, 0x32	; 50
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	e2 e3       	ldi	r30, 0x32	; 50
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	48 2f       	mov	r20, r24
 3d6:	8a 81       	ldd	r24, Y+2	; 0x02
 3d8:	28 2f       	mov	r18, r24
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 2e       	mov	r0, r18
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <GPIO_writePin+0x194>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <GPIO_writePin+0x190>
 3ec:	84 2b       	or	r24, r20
 3ee:	8c 93       	st	X, r24
 3f0:	14 c0       	rjmp	.+40     	; 0x41a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD_REG,pin_num);
 3f2:	a2 e3       	ldi	r26, 0x32	; 50
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	e2 e3       	ldi	r30, 0x32	; 50
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	48 2f       	mov	r20, r24
 3fe:	8a 81       	ldd	r24, Y+2	; 0x02
 400:	28 2f       	mov	r18, r24
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 2e       	mov	r0, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <GPIO_writePin+0x1bc>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	0a 94       	dec	r0
 412:	e2 f7       	brpl	.-8      	; 0x40c <GPIO_writePin+0x1b8>
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	cf 91       	pop	r28
 426:	df 91       	pop	r29
 428:	08 95       	ret

0000042a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 42a:	df 93       	push	r29
 42c:	cf 93       	push	r28
 42e:	00 d0       	rcall	.+0      	; 0x430 <GPIO_readPin+0x6>
 430:	00 d0       	rcall	.+0      	; 0x432 <GPIO_readPin+0x8>
 432:	0f 92       	push	r0
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
 438:	8a 83       	std	Y+2, r24	; 0x02
 43a:	6b 83       	std	Y+3, r22	; 0x03

	uint8 pin_value = LOGIC_LOW;
 43c:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 43e:	8b 81       	ldd	r24, Y+3	; 0x03
 440:	88 30       	cpi	r24, 0x08	; 8
 442:	08 f0       	brcs	.+2      	; 0x446 <GPIO_readPin+0x1c>
 444:	84 c0       	rjmp	.+264    	; 0x54e <GPIO_readPin+0x124>
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	84 30       	cpi	r24, 0x04	; 4
 44a:	08 f0       	brcs	.+2      	; 0x44e <GPIO_readPin+0x24>
 44c:	80 c0       	rjmp	.+256    	; 0x54e <GPIO_readPin+0x124>
		/* Do Nothing  */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 44e:	8a 81       	ldd	r24, Y+2	; 0x02
 450:	28 2f       	mov	r18, r24
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	3d 83       	std	Y+5, r19	; 0x05
 456:	2c 83       	std	Y+4, r18	; 0x04
 458:	4c 81       	ldd	r20, Y+4	; 0x04
 45a:	5d 81       	ldd	r21, Y+5	; 0x05
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	51 05       	cpc	r21, r1
 460:	79 f1       	breq	.+94     	; 0x4c0 <GPIO_readPin+0x96>
 462:	8c 81       	ldd	r24, Y+4	; 0x04
 464:	9d 81       	ldd	r25, Y+5	; 0x05
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	91 05       	cpc	r25, r1
 46a:	34 f4       	brge	.+12     	; 0x478 <GPIO_readPin+0x4e>
 46c:	2c 81       	ldd	r18, Y+4	; 0x04
 46e:	3d 81       	ldd	r19, Y+5	; 0x05
 470:	21 15       	cp	r18, r1
 472:	31 05       	cpc	r19, r1
 474:	69 f0       	breq	.+26     	; 0x490 <GPIO_readPin+0x66>
 476:	6b c0       	rjmp	.+214    	; 0x54e <GPIO_readPin+0x124>
 478:	4c 81       	ldd	r20, Y+4	; 0x04
 47a:	5d 81       	ldd	r21, Y+5	; 0x05
 47c:	42 30       	cpi	r20, 0x02	; 2
 47e:	51 05       	cpc	r21, r1
 480:	b9 f1       	breq	.+110    	; 0x4f0 <GPIO_readPin+0xc6>
 482:	8c 81       	ldd	r24, Y+4	; 0x04
 484:	9d 81       	ldd	r25, Y+5	; 0x05
 486:	83 30       	cpi	r24, 0x03	; 3
 488:	91 05       	cpc	r25, r1
 48a:	09 f4       	brne	.+2      	; 0x48e <GPIO_readPin+0x64>
 48c:	49 c0       	rjmp	.+146    	; 0x520 <GPIO_readPin+0xf6>
 48e:	5f c0       	rjmp	.+190    	; 0x54e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA_REG,pin_num))
 490:	e9 e3       	ldi	r30, 0x39	; 57
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	28 2f       	mov	r18, r24
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	88 2f       	mov	r24, r24
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	a9 01       	movw	r20, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <GPIO_readPin+0x7e>
 4a4:	55 95       	asr	r21
 4a6:	47 95       	ror	r20
 4a8:	8a 95       	dec	r24
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <GPIO_readPin+0x7a>
 4ac:	ca 01       	movw	r24, r20
 4ae:	81 70       	andi	r24, 0x01	; 1
 4b0:	90 70       	andi	r25, 0x00	; 0
 4b2:	88 23       	and	r24, r24
 4b4:	19 f0       	breq	.+6      	; 0x4bc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	89 83       	std	Y+1, r24	; 0x01
 4ba:	49 c0       	rjmp	.+146    	; 0x54e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 4bc:	19 82       	std	Y+1, r1	; 0x01
 4be:	47 c0       	rjmp	.+142    	; 0x54e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB_REG,pin_num))
 4c0:	e6 e3       	ldi	r30, 0x36	; 54
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	a9 01       	movw	r20, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <GPIO_readPin+0xae>
 4d4:	55 95       	asr	r21
 4d6:	47 95       	ror	r20
 4d8:	8a 95       	dec	r24
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <GPIO_readPin+0xaa>
 4dc:	ca 01       	movw	r24, r20
 4de:	81 70       	andi	r24, 0x01	; 1
 4e0:	90 70       	andi	r25, 0x00	; 0
 4e2:	88 23       	and	r24, r24
 4e4:	19 f0       	breq	.+6      	; 0x4ec <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	89 83       	std	Y+1, r24	; 0x01
 4ea:	31 c0       	rjmp	.+98     	; 0x54e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 4ec:	19 82       	std	Y+1, r1	; 0x01
 4ee:	2f c0       	rjmp	.+94     	; 0x54e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC_REG,pin_num))
 4f0:	e3 e3       	ldi	r30, 0x33	; 51
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	8b 81       	ldd	r24, Y+3	; 0x03
 4fc:	88 2f       	mov	r24, r24
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	a9 01       	movw	r20, r18
 502:	02 c0       	rjmp	.+4      	; 0x508 <GPIO_readPin+0xde>
 504:	55 95       	asr	r21
 506:	47 95       	ror	r20
 508:	8a 95       	dec	r24
 50a:	e2 f7       	brpl	.-8      	; 0x504 <GPIO_readPin+0xda>
 50c:	ca 01       	movw	r24, r20
 50e:	81 70       	andi	r24, 0x01	; 1
 510:	90 70       	andi	r25, 0x00	; 0
 512:	88 23       	and	r24, r24
 514:	19 f0       	breq	.+6      	; 0x51c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	89 83       	std	Y+1, r24	; 0x01
 51a:	19 c0       	rjmp	.+50     	; 0x54e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 51c:	19 82       	std	Y+1, r1	; 0x01
 51e:	17 c0       	rjmp	.+46     	; 0x54e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND_REG,pin_num))
 520:	e0 e3       	ldi	r30, 0x30	; 48
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	28 2f       	mov	r18, r24
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	88 2f       	mov	r24, r24
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	a9 01       	movw	r20, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <GPIO_readPin+0x10e>
 534:	55 95       	asr	r21
 536:	47 95       	ror	r20
 538:	8a 95       	dec	r24
 53a:	e2 f7       	brpl	.-8      	; 0x534 <GPIO_readPin+0x10a>
 53c:	ca 01       	movw	r24, r20
 53e:	81 70       	andi	r24, 0x01	; 1
 540:	90 70       	andi	r25, 0x00	; 0
 542:	88 23       	and	r24, r24
 544:	19 f0       	breq	.+6      	; 0x54c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	89 83       	std	Y+1, r24	; 0x01
 54a:	01 c0       	rjmp	.+2      	; 0x54e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 54c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 54e:	89 81       	ldd	r24, Y+1	; 0x01
}
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	cf 91       	pop	r28
 55c:	df 91       	pop	r29
 55e:	08 95       	ret

00000560 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 560:	df 93       	push	r29
 562:	cf 93       	push	r28
 564:	00 d0       	rcall	.+0      	; 0x566 <GPIO_setupPortDirection+0x6>
 566:	00 d0       	rcall	.+0      	; 0x568 <GPIO_setupPortDirection+0x8>
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	89 83       	std	Y+1, r24	; 0x01
 56e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	84 30       	cpi	r24, 0x04	; 4
 574:	90 f5       	brcc	.+100    	; 0x5da <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	28 2f       	mov	r18, r24
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	3c 83       	std	Y+4, r19	; 0x04
 57e:	2b 83       	std	Y+3, r18	; 0x03
 580:	8b 81       	ldd	r24, Y+3	; 0x03
 582:	9c 81       	ldd	r25, Y+4	; 0x04
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	91 05       	cpc	r25, r1
 588:	d1 f0       	breq	.+52     	; 0x5be <GPIO_setupPortDirection+0x5e>
 58a:	2b 81       	ldd	r18, Y+3	; 0x03
 58c:	3c 81       	ldd	r19, Y+4	; 0x04
 58e:	22 30       	cpi	r18, 0x02	; 2
 590:	31 05       	cpc	r19, r1
 592:	2c f4       	brge	.+10     	; 0x59e <GPIO_setupPortDirection+0x3e>
 594:	8b 81       	ldd	r24, Y+3	; 0x03
 596:	9c 81       	ldd	r25, Y+4	; 0x04
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	61 f0       	breq	.+24     	; 0x5b4 <GPIO_setupPortDirection+0x54>
 59c:	1e c0       	rjmp	.+60     	; 0x5da <GPIO_setupPortDirection+0x7a>
 59e:	2b 81       	ldd	r18, Y+3	; 0x03
 5a0:	3c 81       	ldd	r19, Y+4	; 0x04
 5a2:	22 30       	cpi	r18, 0x02	; 2
 5a4:	31 05       	cpc	r19, r1
 5a6:	81 f0       	breq	.+32     	; 0x5c8 <GPIO_setupPortDirection+0x68>
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	9c 81       	ldd	r25, Y+4	; 0x04
 5ac:	83 30       	cpi	r24, 0x03	; 3
 5ae:	91 05       	cpc	r25, r1
 5b0:	81 f0       	breq	.+32     	; 0x5d2 <GPIO_setupPortDirection+0x72>
 5b2:	13 c0       	rjmp	.+38     	; 0x5da <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG = direction;
 5b4:	ea e3       	ldi	r30, 0x3A	; 58
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ba:	80 83       	st	Z, r24
 5bc:	0e c0       	rjmp	.+28     	; 0x5da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG = direction;
 5be:	e7 e3       	ldi	r30, 0x37	; 55
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	80 83       	st	Z, r24
 5c6:	09 c0       	rjmp	.+18     	; 0x5da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG = direction;
 5c8:	e4 e3       	ldi	r30, 0x34	; 52
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	80 83       	st	Z, r24
 5d0:	04 c0       	rjmp	.+8      	; 0x5da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG = direction;
 5d2:	e1 e3       	ldi	r30, 0x31	; 49
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	80 83       	st	Z, r24
			break;
		}
	}
}
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	cf 91       	pop	r28
 5e4:	df 91       	pop	r29
 5e6:	08 95       	ret

000005e8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 5e8:	df 93       	push	r29
 5ea:	cf 93       	push	r28
 5ec:	00 d0       	rcall	.+0      	; 0x5ee <GPIO_writePort+0x6>
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <GPIO_writePort+0x8>
 5f0:	cd b7       	in	r28, 0x3d	; 61
 5f2:	de b7       	in	r29, 0x3e	; 62
 5f4:	89 83       	std	Y+1, r24	; 0x01
 5f6:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
 5f8:	89 81       	ldd	r24, Y+1	; 0x01
 5fa:	84 30       	cpi	r24, 0x04	; 4
 5fc:	90 f5       	brcc	.+100    	; 0x662 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
 600:	28 2f       	mov	r18, r24
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	3c 83       	std	Y+4, r19	; 0x04
 606:	2b 83       	std	Y+3, r18	; 0x03
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	9c 81       	ldd	r25, Y+4	; 0x04
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	91 05       	cpc	r25, r1
 610:	d1 f0       	breq	.+52     	; 0x646 <GPIO_writePort+0x5e>
 612:	2b 81       	ldd	r18, Y+3	; 0x03
 614:	3c 81       	ldd	r19, Y+4	; 0x04
 616:	22 30       	cpi	r18, 0x02	; 2
 618:	31 05       	cpc	r19, r1
 61a:	2c f4       	brge	.+10     	; 0x626 <GPIO_writePort+0x3e>
 61c:	8b 81       	ldd	r24, Y+3	; 0x03
 61e:	9c 81       	ldd	r25, Y+4	; 0x04
 620:	00 97       	sbiw	r24, 0x00	; 0
 622:	61 f0       	breq	.+24     	; 0x63c <GPIO_writePort+0x54>
 624:	1e c0       	rjmp	.+60     	; 0x662 <GPIO_writePort+0x7a>
 626:	2b 81       	ldd	r18, Y+3	; 0x03
 628:	3c 81       	ldd	r19, Y+4	; 0x04
 62a:	22 30       	cpi	r18, 0x02	; 2
 62c:	31 05       	cpc	r19, r1
 62e:	81 f0       	breq	.+32     	; 0x650 <GPIO_writePort+0x68>
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	9c 81       	ldd	r25, Y+4	; 0x04
 634:	83 30       	cpi	r24, 0x03	; 3
 636:	91 05       	cpc	r25, r1
 638:	81 f0       	breq	.+32     	; 0x65a <GPIO_writePort+0x72>
 63a:	13 c0       	rjmp	.+38     	; 0x662 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG = value ;
 63c:	eb e3       	ldi	r30, 0x3B	; 59
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	8a 81       	ldd	r24, Y+2	; 0x02
 642:	80 83       	st	Z, r24
 644:	0e c0       	rjmp	.+28     	; 0x662 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG = value ;
 646:	e8 e3       	ldi	r30, 0x38	; 56
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	8a 81       	ldd	r24, Y+2	; 0x02
 64c:	80 83       	st	Z, r24
 64e:	09 c0       	rjmp	.+18     	; 0x662 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG = value ;
 650:	e5 e3       	ldi	r30, 0x35	; 53
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	8a 81       	ldd	r24, Y+2	; 0x02
 656:	80 83       	st	Z, r24
 658:	04 c0       	rjmp	.+8      	; 0x662 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG = value ;
 65a:	e2 e3       	ldi	r30, 0x32	; 50
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	8a 81       	ldd	r24, Y+2	; 0x02
 660:	80 83       	st	Z, r24
			break;
		}
	}
}
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	cf 91       	pop	r28
 66c:	df 91       	pop	r29
 66e:	08 95       	ret

00000670 <GPIO_readPort>:
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */

uint8 GPIO_readPort(uint8 port_num)
{
 670:	df 93       	push	r29
 672:	cf 93       	push	r28
 674:	00 d0       	rcall	.+0      	; 0x676 <GPIO_readPort+0x6>
 676:	00 d0       	rcall	.+0      	; 0x678 <GPIO_readPort+0x8>
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
 67c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 67e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if((port_num >= NUM_OF_PORTS))
 680:	8a 81       	ldd	r24, Y+2	; 0x02
 682:	84 30       	cpi	r24, 0x04	; 4
 684:	90 f5       	brcc	.+100    	; 0x6ea <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 686:	8a 81       	ldd	r24, Y+2	; 0x02
 688:	28 2f       	mov	r18, r24
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	3c 83       	std	Y+4, r19	; 0x04
 68e:	2b 83       	std	Y+3, r18	; 0x03
 690:	8b 81       	ldd	r24, Y+3	; 0x03
 692:	9c 81       	ldd	r25, Y+4	; 0x04
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	91 05       	cpc	r25, r1
 698:	d1 f0       	breq	.+52     	; 0x6ce <GPIO_readPort+0x5e>
 69a:	2b 81       	ldd	r18, Y+3	; 0x03
 69c:	3c 81       	ldd	r19, Y+4	; 0x04
 69e:	22 30       	cpi	r18, 0x02	; 2
 6a0:	31 05       	cpc	r19, r1
 6a2:	2c f4       	brge	.+10     	; 0x6ae <GPIO_readPort+0x3e>
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	9c 81       	ldd	r25, Y+4	; 0x04
 6a8:	00 97       	sbiw	r24, 0x00	; 0
 6aa:	61 f0       	breq	.+24     	; 0x6c4 <GPIO_readPort+0x54>
 6ac:	1e c0       	rjmp	.+60     	; 0x6ea <GPIO_readPort+0x7a>
 6ae:	2b 81       	ldd	r18, Y+3	; 0x03
 6b0:	3c 81       	ldd	r19, Y+4	; 0x04
 6b2:	22 30       	cpi	r18, 0x02	; 2
 6b4:	31 05       	cpc	r19, r1
 6b6:	81 f0       	breq	.+32     	; 0x6d8 <GPIO_readPort+0x68>
 6b8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ba:	9c 81       	ldd	r25, Y+4	; 0x04
 6bc:	83 30       	cpi	r24, 0x03	; 3
 6be:	91 05       	cpc	r25, r1
 6c0:	81 f0       	breq	.+32     	; 0x6e2 <GPIO_readPort+0x72>
 6c2:	13 c0       	rjmp	.+38     	; 0x6ea <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA_REG;
 6c4:	e9 e3       	ldi	r30, 0x39	; 57
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	80 81       	ld	r24, Z
 6ca:	89 83       	std	Y+1, r24	; 0x01
 6cc:	0e c0       	rjmp	.+28     	; 0x6ea <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB_REG ;
 6ce:	e6 e3       	ldi	r30, 0x36	; 54
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	80 81       	ld	r24, Z
 6d4:	89 83       	std	Y+1, r24	; 0x01
 6d6:	09 c0       	rjmp	.+18     	; 0x6ea <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC_REG;
 6d8:	e3 e3       	ldi	r30, 0x33	; 51
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	89 83       	std	Y+1, r24	; 0x01
 6e0:	04 c0       	rjmp	.+8      	; 0x6ea <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND_REG;
 6e2:	e0 e3       	ldi	r30, 0x30	; 48
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 6ea:	89 81       	ldd	r24, Y+1	; 0x01
}
 6ec:	0f 90       	pop	r0
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	cf 91       	pop	r28
 6f6:	df 91       	pop	r29
 6f8:	08 95       	ret

000006fa <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
 6fa:	df 93       	push	r29
 6fc:	cf 93       	push	r28
 6fe:	00 d0       	rcall	.+0      	; 0x700 <KEYPAD_getPressedKey+0x6>
 700:	cd b7       	in	r28, 0x3d	; 61
 702:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	40 e0       	ldi	r20, 0x00	; 0
 70a:	0e 94 3f 00 	call	0x7e	; 0x7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	61 e0       	ldi	r22, 0x01	; 1
 712:	40 e0       	ldi	r20, 0x00	; 0
 714:	0e 94 3f 00 	call	0x7e	; 0x7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	62 e0       	ldi	r22, 0x02	; 2
 71c:	40 e0       	ldi	r20, 0x00	; 0
 71e:	0e 94 3f 00 	call	0x7e	; 0x7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	63 e0       	ldi	r22, 0x03	; 3
 726:	40 e0       	ldi	r20, 0x00	; 0
 728:	0e 94 3f 00 	call	0x7e	; 0x7e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	64 e0       	ldi	r22, 0x04	; 4
 730:	40 e0       	ldi	r20, 0x00	; 0
 732:	0e 94 3f 00 	call	0x7e	; 0x7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	65 e0       	ldi	r22, 0x05	; 5
 73a:	40 e0       	ldi	r20, 0x00	; 0
 73c:	0e 94 3f 00 	call	0x7e	; 0x7e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	66 e0       	ldi	r22, 0x06	; 6
 744:	40 e0       	ldi	r20, 0x00	; 0
 746:	0e 94 3f 00 	call	0x7e	; 0x7e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
 74a:	19 82       	std	Y+1, r1	; 0x01
 74c:	34 c0       	rjmp	.+104    	; 0x7b6 <KEYPAD_getPressedKey+0xbc>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	69 81       	ldd	r22, Y+1	; 0x01
 752:	41 e0       	ldi	r20, 0x01	; 1
 754:	0e 94 3f 00 	call	0x7e	; 0x7e <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	69 81       	ldd	r22, Y+1	; 0x01
 75c:	40 e0       	ldi	r20, 0x00	; 0
 75e:	0e 94 2a 01 	call	0x254	; 0x254 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
 762:	1a 82       	std	Y+2, r1	; 0x02
 764:	1d c0       	rjmp	.+58     	; 0x7a0 <KEYPAD_getPressedKey+0xa6>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
 766:	8a 81       	ldd	r24, Y+2	; 0x02
 768:	98 2f       	mov	r25, r24
 76a:	9c 5f       	subi	r25, 0xFC	; 252
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	69 2f       	mov	r22, r25
 770:	0e 94 15 02 	call	0x42a	; 0x42a <GPIO_readPin>
 774:	88 23       	and	r24, r24
 776:	89 f4       	brne	.+34     	; 0x79a <KEYPAD_getPressedKey+0xa0>
				{
					#if (KEYPAD_NUM_COLS == 3)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
 778:	89 81       	ldd	r24, Y+1	; 0x01
 77a:	28 2f       	mov	r18, r24
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	c9 01       	movw	r24, r18
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	82 0f       	add	r24, r18
 786:	93 1f       	adc	r25, r19
 788:	98 2f       	mov	r25, r24
 78a:	8a 81       	ldd	r24, Y+2	; 0x02
 78c:	89 0f       	add	r24, r25
 78e:	8f 5f       	subi	r24, 0xFF	; 255
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
 790:	0f 90       	pop	r0
 792:	0f 90       	pop	r0
 794:	cf 91       	pop	r28
 796:	df 91       	pop	r29
 798:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
 79a:	8a 81       	ldd	r24, Y+2	; 0x02
 79c:	8f 5f       	subi	r24, 0xFF	; 255
 79e:	8a 83       	std	Y+2, r24	; 0x02
 7a0:	8a 81       	ldd	r24, Y+2	; 0x02
 7a2:	83 30       	cpi	r24, 0x03	; 3
 7a4:	00 f3       	brcs	.-64     	; 0x766 <KEYPAD_getPressedKey+0x6c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	69 81       	ldd	r22, Y+1	; 0x01
 7aa:	40 e0       	ldi	r20, 0x00	; 0
 7ac:	0e 94 3f 00 	call	0x7e	; 0x7e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
 7b0:	89 81       	ldd	r24, Y+1	; 0x01
 7b2:	8f 5f       	subi	r24, 0xFF	; 255
 7b4:	89 83       	std	Y+1, r24	; 0x01
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	84 30       	cpi	r24, 0x04	; 4
 7ba:	48 f2       	brcs	.-110    	; 0x74e <KEYPAD_getPressedKey+0x54>
 7bc:	c6 cf       	rjmp	.-116    	; 0x74a <KEYPAD_getPressedKey+0x50>

000007be <_exit>:
 7be:	f8 94       	cli

000007c0 <__stop_program>:
 7c0:	ff cf       	rjmp	.-2      	; 0x7c0 <__stop_program>
